// ‡πÑ‡∏ü‡∏•‡πå: /src/scripts/myaccount.js

import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { 
  getFirestore, 
  collection, 
  getDocs,
  query,
  orderBy,
  doc,
  updateDoc,
  deleteDoc
} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

// Firebase Configuration
const firebaseConfig = {
  apiKey: "AIzaSyBySeWqMxCrBI4oIEXwaCJnsjUbPW3afN4",
  authDomain: "lunaroomspa.firebaseapp.com",
  databaseURL: "https://lunaroomspa-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "lunaroomspa",
  storageBucket: "lunaroomspa.firebasestorage.app",
  messagingSenderId: "299973663585",
  appId: "1:299973663585:web:9c3a5be0768e1eaa58c320",
  measurementId: "G-5KF6ZJ7XDW"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// ===================================
// State Management
// ===================================
let currentBookings = [];

// ===================================
// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bookings ‡∏à‡∏≤‡∏Å Firebase
// ===================================
async function getBookings() {
  try {
    console.log('üìö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...');
    
    const bookCol = collection(db, 'bookings');
    const q = query(bookCol, orderBy('createdAt', 'desc'));
    const bookSnap = await getDocs(q);
    
    const bookings = [];
    bookSnap.forEach(doc => {
      bookings.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    console.log('‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', bookings.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    return bookings;
  } catch (error) {
    console.error('‚ùå Error getting bookings:', error);
    throw error;
  }
}

// ===================================
// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// ===================================
async function updateBookingStatus(bookingId, newStatus) {
  try {
    const bookingRef = doc(db, 'bookings', bookingId);
    await updateDoc(bookingRef, {
      Status: newStatus
    });
    
    console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', bookingId, '‚Üí', newStatus);
    
    // Reload bookings
    await initializeMyAccount();
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå Error updating status:', error);
    return { success: false, error: error.message };
  }
}

// ===================================
// ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// ===================================
async function deleteBooking(bookingId) {
  try {
    await deleteDoc(doc(db, 'bookings', bookingId));
    console.log('‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', bookingId);
    
    // Reload bookings
    await initializeMyAccount();
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå Error deleting booking:', error);
    return { success: false, error: error.message };
  }
}

// ===================================
// ‡πÅ‡∏™‡∏î‡∏á Loading State
// ===================================
function showLoading(containerClass) {
  const container = document.querySelector(containerClass);
  if (!container) return;

  container.innerHTML = `
    <div class="loading-container" style="display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 60px 20px; gap: 20px;">
      <div class="loading-spinner" style="width: 50px; height: 50px; border: 4px solid #f3f3f3; border-top: 4px solid #d4a574; border-radius: 50%; animation: spin 1s linear infinite;"></div>
      <p class="loading-text" style="color: #666; font-size: 16px;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
    </div>
    <style>
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    </style>
  `;
}

// ===================================
// ‡πÅ‡∏™‡∏î‡∏á Error State
// ===================================
function showError(containerClass, message) {
  const container = document.querySelector(containerClass);
  if (!container) return;

  container.innerHTML = `
    <div class="error-container" style="display: flex; flex-direction: column; align-items: center; padding: 60px 20px; gap: 15px; text-align: center;">
      <div class="error-icon" style="font-size: 60px;">‚ö†Ô∏è</div>
      <h3 class="error-title" style="color: #d32f2f; margin: 0; font-size: 20px;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
      <p class="error-message" style="color: #666; margin: 0;">${message}</p>
      <button class="error-retry-btn" onclick="window.location.reload()" style="background: #d4a574; color: white; border: none; padding: 12px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; margin-top: 10px;">
        ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      </button>
    </div>
  `;
}

// ===================================
// ‡πÅ‡∏™‡∏î‡∏á Empty State
// ===================================
function showEmpty(containerClass, title, message, buttonText, buttonLink) {
  const container = document.querySelector(containerClass);
  if (!container) return;

  container.innerHTML = `
    <div class="no-data" style="display: flex; flex-direction: column; align-items: center; padding: 60px 20px; gap: 15px; text-align: center;">
      <div class="no-data-icon" style="font-size: 60px;">üìã</div>
      <h3 class="no-data-title" style="color: #333; margin: 0; font-size: 20px;">${title}</h3>
      <p class="no-data-message" style="color: #666; margin: 0;">${message}</p>
      <button class="no-data-button" onclick="window.location.href='${buttonLink}'" style="background: #d4a574; color: white; border: none; padding: 12px 30px; border-radius: 8px; cursor: pointer; font-size: 16px; margin-top: 10px;">
        ${buttonText}
      </button>
    </div>
  `;
}

// ===================================
// ‡πÅ‡∏õ‡∏•‡∏á Status ‡πÄ‡∏õ‡πá‡∏ô CSS Class
// ===================================
function getStatusClass(status) {
  const statusMap = {
    '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': 'status-pending',
    '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß': 'status-confirmed',
    '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô': 'status-completed',
    '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': 'status-cancelled'
  };
  return statusMap[status] || 'status-pending';
}

// ===================================
// ‡πÅ‡∏õ‡∏•‡∏á Timestamp ‡πÄ‡∏õ‡πá‡∏ô Date String
// ===================================
function formatDate(timestamp) {
  if (!timestamp) return '-';
  
  try {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Firestore Timestamp
    if (timestamp.toDate) {
      const date = timestamp.toDate();
      return date.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object
    if (timestamp instanceof Date) {
      return timestamp.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      });
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string (YYYY-MM-DD)
    if (typeof timestamp === 'string') {
      const date = new Date(timestamp);
      if (!isNaN(date.getTime())) {
        return date.toLocaleDateString('th-TH', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });
      }
    }
    
    return timestamp.toString();
  } catch (error) {
    console.error('Error formatting date:', error);
    return '-';
  }
}

// ===================================
// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (24h format to 12h)
// ===================================
function formatTime(time) {
  if (!time) return '-';
  
  try {
    const [hours, minutes] = time.split(':');
    const hour = parseInt(hours);
    const period = hour >= 12 ? 'PM' : 'AM';
    const hour12 = hour % 12 || 12;
    
    return `${hour12}:${minutes} ${period}`;
  } catch (error) {
    return time;
  }
}

// ===================================
// ‡∏™‡∏£‡πâ‡∏≤‡∏á Booking Card
// ===================================
function createBookingCard(booking) {
  const card = document.createElement('div');
  card.className = 'booking-card';
  
  const statusClass = getStatusClass(booking.Status);
  const statusText = booking.Status || '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
  const dateStr = formatDate(booking.date);
  const timeStr = formatTime(booking.time);
  
  card.innerHTML = `
    <div class="booking-header">
      <span class="booking-id">‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: #${booking.id.substring(0, 10).toUpperCase()}</span>
      <span class="booking-status ${statusClass}">${statusText}</span>
    </div>
    <div class="booking-details">
      <div class="detail-grid">
        <div class="detail-item">
          <span class="detail-label">Treatment Package</span>
          <span class="detail-value">${booking.packageName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
        </div>
        <div class="detail-item">
          <span class="detail-label">Treatment</span>
          <span class="detail-value">${booking.treatmentName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</span>
        </div>
        <div class="detail-item">
          <span class="detail-label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á</span>
          <span class="detail-value">${dateStr}</span>
        </div>
        <div class="detail-item">
          <span class="detail-label">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á</span>
          <span class="detail-value">${timeStr}</span>
        </div>
      </div>
    </div>
    <div class="card-actions">
      ${getActionButtons(booking.Status, booking.id)}
    </div>
  `;
  
  return card;
}

// ===================================
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° Actions ‡∏ï‡∏≤‡∏° Status
// ===================================
function getActionButtons(status, bookingId) {
  if (status === '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£') {
    return `
      <button class="payment-btn" onclick="handlePayment('${bookingId}')">
        <svg class="btn-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="2" y="5" width="20" height="14" rx="2"/>
          <line x1="2" y1="10" x2="22" y2="10"/>
        </svg>
        ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      </button>
      <button class="cancel-btn" onclick="handleCancel('${bookingId}')">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</button>
    `;
  } else if (status === '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß') {
    return `
      <button class="detail-btn" onclick="handleViewDetail('${bookingId}')">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
    `;
  } else if (status === '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô') {
    return `
      <button class="detail-btn" onclick="handleViewDetail('${bookingId}')">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
      <button class="review-btn" onclick="handleReview('${bookingId}')">‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</button>
    `;
  } else {
    return `
      <button class="detail-btn" onclick="handleViewDetail('${bookingId}')">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
    `;
  }
}

// ===================================
// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bookings
// ===================================
function displayBookings(bookings) {
  const bookingList = document.querySelector('.booking-list');
  
  if (!bookingList) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö element .booking-list');
    return;
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (bookings.length === 0) {
    showEmpty(
      '.booking-list',
      '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
      '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
      '‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¢',
      '/src/pages/booking.html'
    );
    return;
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å
  bookingList.innerHTML = '';

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  bookings.forEach(booking => {
    const bookingCard = createBookingCard(booking);
    bookingList.appendChild(bookingCard);
  });

  console.log('‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', bookings.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
}

// ===================================
// Action Handlers (Global Functions)
// ===================================
window.handlePayment = function(bookingId) {
  alert(`üè¶ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${bookingId}`);
  // TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  // window.location.href = `/payment.html?bookingId=${bookingId}`;
};

window.handleCancel = async function(bookingId) {
  if (confirm('‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
    const result = await updateBookingStatus(bookingId, '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
    
    if (result.success) {
      alert('‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else {
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  }
};

window.handleViewDetail = function(bookingId) {
  const booking = currentBookings.find(b => b.id === bookingId);
  if (booking) {
    console.log('üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:', booking);
    
    const details = `
üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á

‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: #${booking.id.substring(0, 10).toUpperCase()}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${booking.Status}

‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à: ${booking.packageName}
‡∏ó‡∏£‡∏µ‡∏ó‡πÄ‡∏°‡∏ô‡∏ï‡πå: ${booking.treatmentName}

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatDate(booking.date)}
‡πÄ‡∏ß‡∏•‡∏≤: ${formatTime(booking.time)}

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: ${formatDate(booking.createdAt)}
    `.trim();
    
    alert(details);
  }
};

window.handleReview = function(bookingId) {
  alert(`‚≠ê ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${bookingId}`);
  // TODO: ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  // window.location.href = `/review.html?bookingId=${bookingId}`;
};

// ===================================
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Menu Sidebar
// ===================================
function initializeSidebar() {
  const menuButtons = document.querySelectorAll('.menu-btn:not(.logout-btn)');
  const contentSections = document.querySelectorAll('.content-section');
  
  menuButtons.forEach(button => {
    button.addEventListener('click', () => {
      // ‡∏•‡∏ö active class ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      menuButtons.forEach(btn => btn.classList.remove('active'));
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° active class ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
      button.classList.add('active');
      
      // ‡∏ã‡πà‡∏≠‡∏ô content ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      contentSections.forEach(section => section.classList.remove('active'));
      
      // ‡πÅ‡∏™‡∏î‡∏á content ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const targetSection = button.getAttribute('data-section');
      const targetElement = document.getElementById(targetSection);
      if (targetElement) {
        targetElement.classList.add('active');
      }
    });
  });
}

// ===================================
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Logout
// ===================================
function initializeLogout() {
  const logoutBtn = document.getElementById('logoutBtn');
  if (logoutBtn) {
    logoutBtn.addEventListener('click', () => {
      if (confirm('üö™ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
        alert('‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        window.location.href = '/index.html';
      }
    });
  }
}

// ===================================
// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Profile Form
// ===================================
function initializeProfileForm() {
  const profileForm = document.querySelector('.profile-form');
  if (profileForm) {
    profileForm.addEventListener('submit', (e) => {
      e.preventDefault();
      
      const formData = {
        firstName: document.getElementById('firstName')?.value,
        lastName: document.getElementById('lastName')?.value,
        email: document.getElementById('email')?.value,
        phone: document.getElementById('phone')?.value,
        address: document.getElementById('address')?.value,
      };
      
      console.log('üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', formData);
      alert('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    });
  }
}

// ===================================
// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// ===================================
async function initializeMyAccount() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î MyAccount...');
  
  // ‡πÅ‡∏™‡∏î‡∏á Loading
  showLoading('.booking-list');
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const bookings = await getBookings();
    currentBookings = bookings;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    displayBookings(bookings);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    showError('.booking-list', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
  }
}

// ===================================
// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
// ===================================
document.addEventListener('DOMContentLoaded', () => {
  console.log('üìÑ MyAccount Page Loaded');
  
  // Initialize ‡∏ï‡πà‡∏≤‡∏á‡πÜ
  initializeSidebar();
  initializeLogout();
  initializeProfileForm();
  initializeMyAccount();
});